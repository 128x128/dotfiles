# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
		
snippet h "Header Guards" b
#ifndef $1_H 
#define $1_H 

#endif
endsnippet

snippet io "#include <stdio.h>" b
#include <stdio.h>$1
endsnippet
 
snippet ih "#include <.h>" b
#include <$1.h>
endsnippet
 
snippet ii "#include 'x'" b
#include "$1"
endsnippet

snippet ma "main(){}" b
int main() 
{
		$1
		return 0;
}
endsnippet

snippet pr "printf()" b
printf("$1\n", $2);
endsnippet

snippet for "for() {}" b
for ($1; $2; $3) {
		$4
}
endsnippet
 
snippet fori "for(int i = 0; i < count; i++) {}" b
for (int i$1 = 0$2; i$3 < $4; i++$5) {
		$6
}
endsnippet
 
snippet forj "for(int j = 0; j < count; j++) {}" b
for (int j$1 = 0$2; j$3 < $4; j++$5) {
		$6
}
endsnippet
 
snippet fun "func(){}" b
$1 ($2) 
{
		$3
		return $4
}
endsnippet
